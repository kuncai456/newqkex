# 公共参数
case_common:
  allureEpic: 交易平台接口
  allureFeature: CTC模块
  allureStory: CTC资产接口

ctc_consumer_take_01:
    host: ${{host()}}
    url: /otc/pendings
    method: post
    detail: C2C用户下单接口
    headers:
      # 这里cookie的值，写的是存入缓存的名称
      X-Authorization: $cache{login_consumer_cookie}
    # 请求的数据，是 params 还是 json、或者file、data
    requestType: data
    # 是否执行，空或者 true 都会执行
    is_run:
    data:
      orderId: $cache{take_id}
      amount: 0.09090909
      cachedParams: [object Object]

    dependence_case: True
    # 依赖的数据
    dependence_case_data:
      - case_id: ctc_advertise_make_01
        dependent_data:
          - dependent_type: response
            jsonpath: $.data
            set_cache: take_data

      - case_id: ctc_advertise_list_01
        dependent_data:
          - dependent_type: response
            jsonpath: $.data.[0].id
            set_cache: take_id
    assert:
      # 断言接口状态码
      errorCode:
        jsonpath: $.code
        type: ==
        value: 0
        AssertType:
        message: "success"

    current_request_set_cache:
      - type: response
        jsonpath: $.data
        # 自定义的缓存名称
        name: ctc_consumer_take
    sql:
    teardown:
      - case_id: ctc_advertise_consumer_list_01
        param_prepare:
          - dependent_type: self_response
            jsonpath: $.data.items.[0].id
            set_cache: ctc_advertise_consumer_list_01

      - case_id: ctc_consumer_cancel_01
        send_request:
          - dependent_type: cache
            cache_data: ctc_advertise_consumer_list_01
            replace_key: ctc_advertise_consumer_list_01

      - case_id: ctc_advertise_list_01
        param_prepare:
          - dependent_type: self_response
            jsonpath: $.data.[0].id
            set_cache: move_id

      - case_id: ctc_advertise_move_01
        send_request:
          - dependent_type: cache
            cache_data: move_id
            replace_key: move_id

    teardown_sql:
#      - UPDATE `api_test`.`ysq_test` SET `name` = '$json($.data.id)$' WHERE `name` = '2' LIMIT 1



ctc_consumer_take_02:
    host: ${{host()}}
    url: /otc/pendings
    method: post
    detail: C2C用户下单接口
    headers:
      # 这里cookie的值，写的是存入缓存的名称
      X-Authorization: $cache{login_consumer_cookie}
    # 请求的数据，是 params 还是 json、或者file、data
    requestType: data
    # 是否执行，空或者 true 都会执行
    is_run:
    data:
      orderId: $cache{take_id}
      amount: 0.05
      cachedParams: [object Object]

    dependence_case: True
    # 依赖的数据
    dependence_case_data:
      - case_id: ctc_advertise_make_01
        dependent_data:
          - dependent_type: response
            jsonpath: $.data
            set_cache: take_data

      - case_id: ctc_advertise_list_01
        dependent_data:
          - dependent_type: response
            jsonpath: $.data.[0].id
            set_cache: take_id
    assert:
      # 断言接口状态码
      errorCode:
        jsonpath: $.code
        type: ==
        value: 0
        AssertType:
        message: "success"

    current_request_set_cache:
      - type: response
        jsonpath: $.data
        # 自定义的缓存名称
        name: ctc_consumer_take
    sql:
    teardown:
      - case_id: ctc_advertise_consumer_list_01
        param_prepare:
          - dependent_type: self_response
            jsonpath: $.data.items.[0].id
            set_cache: ctc_advertise_consumer_list_01

      - case_id: ctc_consumer_cancel_01
        send_request:
          - dependent_type: cache
            cache_data: ctc_advertise_consumer_list_01
            replace_key: ctc_advertise_consumer_list_01

#      - case_id: ctc_advertise_list_01
#        param_prepare:
#          - dependent_type: self_response
#            jsonpath: $.data.[0].id
#            set_cache: move_id
#
#      - case_id: ctc_advertise_move_01
#        send_request:
#          - dependent_type: cache
#            cache_data: move_id
#            replace_key: move_id


    teardown_sql:
#      - UPDATE `api_test`.`ysq_test` SET `name` = '$json($.data.id)$' WHERE `name` = '2' LIMIT 1

ctc_consumer_take_03:
    host: ${{host()}}
    url: /otc/pendings
    method: post
    detail: C2C用户下单接口
    headers:
      # 这里cookie的值，写的是存入缓存的名称
      X-Authorization: $cache{login_consumer2_cookie}
    # 请求的数据，是 params 还是 json、或者file、data
    requestType: data
    # 是否执行，空或者 true 都会执行
    is_run:
    data:
      orderId: $cache{take_id}
      amount: 0.04090909
      cachedParams: [object Object]

    dependence_case: True
    # 依赖的数据
    dependence_case_data:
#      - case_id: ctc_advertise_make_01
#        dependent_data:
#          - dependent_type: response
#            jsonpath: $.data
#            set_cache: take_data

      - case_id: ctc_advertise_list_01
        dependent_data:
          - dependent_type: response
            jsonpath: $.data.[0].id
            set_cache: take_id
    assert:
      # 断言接口状态码
      errorCode:
        jsonpath: $.code
        type: ==
        value: 0
        AssertType:
        message: "success"

    current_request_set_cache:
      - type: response
        jsonpath: $.data
        # 自定义的缓存名称
        name: ctc_consumer_take
    sql:
    teardown:
      - case_id: ctc_advertise_consumer_list_02
        param_prepare:
          - dependent_type: self_response
            jsonpath: $.data.items.[0].id
            set_cache: ctc_advertise_consumer_list_02

      - case_id: ctc_consumer_cancel_02
        send_request:
          - dependent_type: cache
            cache_data: ctc_advertise_consumer_list_02
            replace_key: ctc_advertise_consumer_list_02

      - case_id: ctc_advertise_list_01
        param_prepare:
          - dependent_type: self_response
            jsonpath: $.data.[0].id
            set_cache: move_id

      - case_id: ctc_advertise_move_01
        send_request:
          - dependent_type: cache
            cache_data: move_id
            replace_key: move_id

    teardown_sql:
#      - UPDATE `api_test`.`ysq_test` SET `name` = '$json($.data.id)$' WHERE `name` = '2' LIMIT 1


ctc_consumer_take_04:
    host: ${{host()}}
    url: /otc/pendings
    method: post
    detail: C2C用户下单接口
    headers:
      # 这里cookie的值，写的是存入缓存的名称
      X-Authorization: $cache{login_consumer_cookie}
    # 请求的数据，是 params 还是 json、或者file、data
    requestType: data
    # 是否执行，空或者 true 都会执行
    is_run:
    data:
      orderId: $cache{take_id}
      amount: 0.05
      cachedParams: [object Object]

    dependence_case: True
    # 依赖的数据
    dependence_case_data:
      - case_id: ctc_advertise_make_01
        dependent_data:
          - dependent_type: response
            jsonpath: $.data
            set_cache: take_data

      - case_id: ctc_advertise_list_01
        dependent_data:
          - dependent_type: response
            jsonpath: $.data.[0].id
            set_cache: take_id
    assert:
      # 断言接口状态码
      errorCode:
        jsonpath: $.code
        type: ==
        value: 0
        AssertType:
        message: "success"

    current_request_set_cache:
      - type: response
        jsonpath: $.data
        # 自定义的缓存名称
        name: ctc_consumer_take
    sql:
    teardown:
      - case_id: ctc_advertise_consumer_list_01
        param_prepare:
          - dependent_type: self_response
            jsonpath: $.data.items.[0].id
            set_cache: ctc_advertise_consumer_list_01

      - case_id: ctc_consumer_cancel_01
        send_request:
          - dependent_type: cache
            cache_data: ctc_advertise_consumer_list_01
            replace_key: ctc_advertise_consumer_list_01

#      - case_id: ctc_advertise_list_01
#        param_prepare:
#          - dependent_type: self_response
#            jsonpath: $.data.[0].id
#            set_cache: move_id
#
#      - case_id: ctc_advertise_move_01
#        send_request:
#          - dependent_type: cache
#            cache_data: move_id
#            replace_key: move_id

    teardown_sql:
#      - UPDATE `api_test`.`ysq_test` SET `name` = '$json($.data.id)$' WHERE `name` = '2' LIMIT 1

ctc_consumer_take_05:
    host: ${{host()}}
    url: /otc/pendings
    method: post
    detail: C2C用户下单接口
    headers:
      # 这里cookie的值，写的是存入缓存的名称
      X-Authorization: $cache{login_consumer2_cookie}
    # 请求的数据，是 params 还是 json、或者file、data
    requestType: data
    # 是否执行，空或者 true 都会执行
    is_run:
    data:
      orderId: $cache{take_id}
      amount: 0.040
      cachedParams: [object Object]

    dependence_case: True
    # 依赖的数据
    dependence_case_data:
#      - case_id: ctc_advertise_make_01
#        dependent_data:
#          - dependent_type: response
#            jsonpath: $.data
#            set_cache: take_data

      - case_id: ctc_advertise_list_01
        dependent_data:
          - dependent_type: response
            jsonpath: $.data.[0].id
            set_cache: take_id
    assert:
      # 断言接口状态码
      errorCode:
        jsonpath: $.code
        type: ==
        value: 0
        AssertType:
        message: "success"

    current_request_set_cache:
      - type: response
        jsonpath: $.data
        # 自定义的缓存名称
        name: ctc_consumer_take
    sql:
    teardown:
      - case_id: ctc_advertise_consumer_list_02
        param_prepare:
          - dependent_type: self_response
            jsonpath: $.data.items.[0].id
            set_cache: ctc_advertise_consumer_list_02

      - case_id: ctc_consumer_cancel_02
        send_request:
          - dependent_type: cache
            cache_data: ctc_advertise_consumer_list_02
            replace_key: ctc_advertise_consumer_list_02

      - case_id: ctc_advertise_list_01
        param_prepare:
          - dependent_type: self_response
            jsonpath: $.data.[0].id
            set_cache: move_id

      - case_id: ctc_advertise_move_01
        send_request:
          - dependent_type: cache
            cache_data: move_id
            replace_key: move_id

    teardown_sql:
#      - UPDATE `api_test`.`ysq_test` SET `name` = '$json($.data.id)$' WHERE `name` = '2' LIMIT 1